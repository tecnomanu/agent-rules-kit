---
description: 
globs: 
alwaysApply: true
---
# Estructura del Proyecto ChatRobot v3

Este proyecto sigue una arquitectura basada en el patrón Repositorio con separación de responsabilidades, siguiendo principios SOLID.

## Estructura de Directorios

```
app/
 ├─ Http/
 │   ├─ Controllers/
 │   │   └─ Api/            # Controladores de API
 │   ├─ Requests/           # Form Requests para validación
 │   └─ Resources/          # API Resources para transformación
 ├─ Models/                 # Modelos Eloquent
 ├─ Repositories/           # Repositorios para acceso a datos
 ├─ Services/               # Servicios que implementan lógica de negocio
 └─ Providers/              # Proveedores de servicios
bootstrap/
 ├─ app.php                 # Configuración principal de la aplicación
 └─ providers.php           # Registro de proveedores de servicios
config/                     # Archivos de configuración
database/
 └─ migrations/             # Migraciones con esquema de base de datos
docs/                       # Documentación del proyecto
public/                     # Punto de entrada y archivos públicos
resources/                  # Vistas, archivos JS/CSS sin compilar
routes/
 ├─ api.php                 # Rutas de API
 ├─ web.php                 # Rutas web (futuro panel de administración)
 ├─ channels.php            # Canales de broadcasting
 └─ console.php             # Comandos personalizados
```

## Principios SOLID Aplicados

1. **S: Responsabilidad Única**

    - Los modelos solo definen la estructura y relaciones.
    - Los repositorios solo manejan el acceso a datos.
    - Los servicios implementan la lógica de negocio.
    - Los controladores solo manejan las solicitudes HTTP.

2. **O: Abierto/Cerrado**

    - BaseRepository proporciona funcionalidad común, los repositorios específicos extienden sin modificar.
    - La lógica de servicios está abierta para extensión por composición.

3. **L: Sustitución de Liskov**

    - Todos los repositorios pueden usarse de manera intercambiable donde se espera BaseRepository.

4. **I: Segregación de Interfaces**

    - Cada servicio y repositorio tiene responsabilidades específicas y bien definidas.

5. **D: Inversión de Dependencias**
    - Los servicios dependen de repositorios inyectados, no de implementaciones concretas.
    - RepositoryServiceProvider registra las implementaciones concretas para la inyección.

## Componentes Clave

### Modelos

Definidos en `app/Models/`, representan las entidades de negocio como Chat, Conversation, Message, etc.

### Repositorios

Ubicados en `app/Repositories/`, proporcionan una capa de abstracción para el acceso a datos:

```php
class ChatRepository extends BaseRepository
{
    public function getChatsByTenant(string $tenantId)
    {
        return $this->model->where('tenant_id', $tenantId)->get();
    }

    // Métodos específicos adicionales...
}
```

### Servicios

Ubicados en `app/Services/`, implementan la lógica de negocio utilizando repositorios:

```php
class ChatService
{
    protected ChatRepository $chatRepository;

    public function __construct(ChatRepository $chatRepository)
    {
        $this->chatRepository = $chatRepository;
    }

    public function createChat(array $data)
    {
        // Lógica de negocio para crear un chat
        $data['hash'] = Str::uuid()->toString();

        return $this->chatRepository->create($data);
    }

    // Otros métodos con lógica de negocio...
}
```

### Controladores API

Ubicados en `app/Http/Controllers/Api/`, manejan las solicitudes HTTP:

```php
class ChatController extends Controller
{
    protected ChatService $chatService;

    public function __construct(ChatService $chatService)
    {
        $this->chatService = $chatService;
    }

    public function store(StoreChatRequest $request): ChatResource
    {
        $data = $request->validated();
        $chat = $this->chatService->createChat($data);

        return new ChatResource($chat);
    }

    // Otros métodos de controlador...
}
```

### Rutas API

Definidas en `routes/api.php`, organizan los endpoints de API:

```php
// Rutas protegidas con autenticación
Route::middleware('auth:sanctum')->group(function () {
    Route::apiResource('chats', ChatController::class);
    // Otras rutas protegidas...
});

// Rutas públicas para el widget de chat
Route::prefix('widget')->group(function () {
    Route::get('chats/{hash}', [ChatController::class, 'getByHash']);
    // Otras rutas públicas...
});
```
