---
description: 
globs: 
alwaysApply: true
---
# Autenticación API con Laravel Sanctum

Este proyecto utiliza Laravel Sanctum para la autenticación API con tokens SPA (Single Page Application).

## Configuración

La autenticación está configurada en:

-   `config/sanctum.php`: Configuración de Sanctum (expiración de tokens, dominios, etc.)
-   `app/Http/Kernel.php`: Middleware de autenticación

## Flujo de Autenticación

1. El usuario envía credenciales a `/api/login`
2. El servidor valida las credenciales y devuelve un token
3. El cliente guarda el token y lo envía en encabezados posteriores
4. El middleware de Sanctum valida el token en cada petición protegida

## Implementación en Routes

```php
// En routes/api.php
Route::middleware('auth:sanctum')->group(function () {
    // Rutas de Chat
    Route::apiResource('chats', ChatController::class);
    Route::put('chats/{id}/toggle-status', [ChatController::class, 'toggleStatus']);

    // Rutas de Lead
    Route::apiResource('leads', LeadController::class)->only(['index', 'show']);
    Route::put('leads/{id}/status', [LeadController::class, 'updateStatus']);
    Route::put('leads/{id}/notes', [LeadController::class, 'addNotes']);
    Route::post('leads/from-conversation', [LeadController::class, 'createFromConversation']);
});

// Rutas públicas que no requieren autenticación
Route::prefix('widget')->group(function () {
    // Obtener la configuración del chat por su hash
    Route::get('chats/{hash}', [ChatController::class, 'getByHash']);

    // Iniciar una nueva conversación
    Route::post('conversations/start', [ConversationController::class, 'start']);

    // ... otras rutas públicas
});
```

## Roles y Permisos

Los roles están definidos en la tabla `roles` con los valores:

-   `superadmin`: Acceso total a la plataforma
-   `company_admin`: Administrador de empresa con acceso a sus recursos
-   `agent_user`: Usuario básico con acceso limitado

La relación entre usuarios y roles se implementa en el modelo User:

```php
public function role(): BelongsTo
{
    return $this->belongsTo(Role::class);
}

public function isSuperAdmin(): bool
{
    return $this->role && $this->role->name === 'superadmin';
}

public function isCompanyAdmin(): bool
{
    return $this->role && $this->role->name === 'company_admin';
}

public function isAgent(): bool
{
    return $this->role && $this->role->name === 'agent_user';
}
```
