---
description: 
globs: 
alwaysApply: true
---
# Modelos Eloquent con UUIDs

Este proyecto utiliza modelos Eloquent con identificadores UUID en lugar de IDs autoincrement.

## Estructura Básica de Modelos

Los modelos están ubicados en `app/Models/` y utilizan el trait nativo `HasUuids` de Laravel:

```php
namespace App\Models;

use Illuminate\Database\Eloquent\Concerns\HasUuids;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

class MiModelo extends Model
{
    use HasFactory, HasUuids;

    protected $fillable = [
        'campo1',
        'campo2',
    ];

    protected $casts = [
        'campo_json' => 'array',
        'campo_bool' => 'boolean',
    ];

    // Relaciones y métodos adicionales...
}
```

## Modelos Principales

### Tenant

Representa empresas/organizaciones que utilizan la plataforma.

```php
class Tenant extends Model
{
    use HasFactory, HasUuids;

    protected $fillable = [
        'name',
        'type',
    ];

    // Relaciones con otros modelos
    public function users(): HasMany
    {
        return $this->hasMany(User::class);
    }

    public function chats(): HasMany
    {
        return $this->hasMany(Chat::class);
    }

    public function leads(): HasMany
    {
        return $this->hasMany(Lead::class);
    }
}
```

### User

Modelo de usuario que extiende de Authenticatable para la autenticación.

```php
class User extends Authenticatable
{
    use HasApiTokens, HasFactory, Notifiable, HasUuids;

    protected $fillable = [
        'name',
        'email',
        'password',
        'tenant_id',
        'role_id',
    ];

    protected $hidden = [
        'password',
        'remember_token',
    ];

    protected $casts = [
        'email_verified_at' => 'datetime',
        'password' => 'hashed',
    ];

    // Relaciones
    public function tenant(): BelongsTo
    {
        return $this->belongsTo(Tenant::class);
    }

    public function role(): BelongsTo
    {
        return $this->belongsTo(Role::class);
    }

    // Métodos auxiliares
    public function isSuperAdmin(): bool
    {
        return $this->role && $this->role->name === 'superadmin';
    }

    // ... otros métodos ...
}
```

### Otros Modelos Clave

-   **Role**: Roles de usuario (`superadmin`, `company_admin`, `agent_user`).
-   **Chat**: Configuración del chat inteligente con prompts y ajustes visuales.
-   **KnowledgeSource**: Fuentes de conocimiento para entrenar al chat (URL, archivo, texto).
-   **Conversation**: Conversaciones entre usuarios y el chat.
-   **Message**: Mensajes individuales de una conversación.
-   **Lead**: Contactos capturados por el chat con su información básica.
